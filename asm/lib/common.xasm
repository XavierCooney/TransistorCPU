ASSERT $com_pre_is_included

INCLUDE instructions
INCLUDE asm_control

DEFINE INTERNAL_COMMAND, HALT_LOOP, {
    JUMP $$
}

DEFINE INTERNAL_COMMAND, ALIGN_TO, mask, {
    ASSERT is_pow_of_two($mask)
    DEFINE VARIABLE, mod_val, mod($$, $mask)

    IF not(is_eq($mod_val, 0)), {
        SKIP_DATA minus($mask, mod($$, $mask))
    }
}

DEFINE INTERNAL_COMMAND, ALLOCATE_ZEROS, size, {
    ASSERT not(is_eq($size, 0))
    DATA zero_extend_numeric(0_1, $size)
}

DEFINE INTERNAL_COMMAND, CALL, function_name, {
    DEFINE VARIABLE, label_after_name, unique_identifier(call_ret_point)

    LOAD_CONSTANT hi(global_label($label_after_name))
    STORE_A global_label($function_name, ret_hi)

    LOAD_CONSTANT mid(global_label($label_after_name))
    STORE_A global_label($function_name, ret_mid)

    LOAD_CONSTANT low(global_label($label_after_name))
    STORE_A global_label($function_name, ret_low)

    JUMP global_label($function_name)

    DEFINE global_label, $label_after_name
}


DEFINE INTERNAL_COMMAND, RETURN, {
    JUMP make(3, %.ret_hi, %.ret_mid, %.ret_low)
}

DEFINE VARIABLE, common_code_section_init, { }
DEFINE VARIABLE, common_code_section_functions, { }
DEFINE VARIABLE, common_code_section_misc_data, { }
DEFINE VARIABLE, common_code_section_unary_tables, { }
DEFINE VARIABLE, common_code_section_bin_tables, { }

DEFINE COMMAND, SECTION, name, code, {
    DEFINE VARIABLE, var_name, concat_ident(common_code_section_, $name)
    DEFINE VARIABLE, old_code, read_var($var_name)
    SET VARIABLE, $var_name, {
        EXECUTE $old_code
        EXECUTE $code
    }
}


DEFINE COMMAND, WRITE_SECTIONS, {
    ALIGN_TO 4
    :initialise
    EXECUTE $common_code_section_init
    JUMP :main
    EXECUTE $common_code_section_functions
    EXECUTE $common_code_section_misc_data
    DEBUG_OUT Instruction_length, $$
    ALIGN_TO 64_3
    EXECUTE $common_code_section_unary_tables
    ALIGN_TO 4096_3
    EXECUTE $common_code_section_bin_tables
}

IF_NEEDED big_int_10, {
    NEED addition
    NEED unary_logic
    NEED binary_compare
    NEED multiplication
}
IF_NEEDED unary_minus, { NEED multiplication }
IF_NEEDED multiplication, { NEED addition }
IF_NEEDED binary_compare, { NEED addition }
IF_NEEDED unary_logic, { NEED addition }
IF_NEEDED addition, { }

IF_NEEDED addition, { UP {
    INCLUDE addition
} }

IF_NEEDED unary_logic, { UP {
    INCLUDE unary_logic
} }

IF_NEEDED binary_compare, { UP {
    INCLUDE binary_compare
} }

IF_NEEDED multiplication, { UP {
    INCLUDE multiplication
} }

IF_NEEDED unary_minus, { UP {
    INCLUDE unary_minus
} }

IF_NEEDED big_int_10, { UP {
    INCLUDE big_int_10
} }
