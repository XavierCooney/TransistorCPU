ASSERT $com_pre_is_included

INCLUDE instructions
INCLUDE asm_control

DEFINE COMMAND, HALT_LOOP, {
    JUMP $$
}

DEFINE COMMAND, ALIGN_TO, mask, {
    ASSERT is_pow_of_two($mask)
    DEFINE VARIABLE, mod_val, mod($$, $mask)

    IF not(is_eq($mod_val, 0)), {
        SKIP_DATA minus($mask, mod($$, $mask))
    }
}

DEFINE COMMAND, ALLOCATE_ZEROS, size, {
    ASSERT not(is_eq($size, 0))
    DATA zero_extend_numeric(0_1, $size)
}

DEFINE VARIABLE, common_code_section_init, { }
DEFINE VARIABLE, common_code_section_functions, { }
DEFINE VARIABLE, common_code_section_misc_data, { }
DEFINE VARIABLE, common_code_section_bin_tables, { }

DEFINE COMMAND, SECTION, name, code, {
    DEFINE VARIABLE, var_name, concat_ident(common_code_section_, $name)
    DEFINE VARIABLE, old_code, read_var($var_name)
    SET VARIABLE, $var_name, {
        EXECUTE $old_code
        EXECUTE $code
    }
}


DEFINE COMMAND, WRITE_SECTIONS, {
    ALIGN_TO 4
    :initialise
    EXECUTE $common_code_section_init
    JUMP :main
    EXECUTE $common_code_section_functions
    EXECUTE $common_code_section_misc_data
    EXECUTE $common_code_section_bin_tables
}

IF_NEEDED multiplication, { NEED addition }

IF_NEEDED addition, { UP {
    INCLUDE addition
} }

IF_NEEDED multiplication, { UP {
    INCLUDE multiplication
} }
